// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "teste.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* teste_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  teste_reflection_ = NULL;
const ::google::protobuf::Descriptor* root2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  root2_reflection_ = NULL;
const ::google::protobuf::Descriptor* root2_child_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  root2_child_reflection_ = NULL;
const ::google::protobuf::Descriptor* root2_child_subchild1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  root2_child_subchild1_reflection_ = NULL;
const ::google::protobuf::Descriptor* root2_child1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  root2_child1_reflection_ = NULL;
const ::google::protobuf::Descriptor* root2_child1_subchild2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  root2_child1_subchild2_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_teste_2eproto() {
  protobuf_AddDesc_teste_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "teste.proto");
  GOOGLE_CHECK(file != NULL);
  teste_descriptor_ = file->message_type(0);
  static const int teste_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teste, i_),
  };
  teste_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      teste_descriptor_,
      teste::default_instance_,
      teste_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teste, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teste, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(teste));
  root2_descriptor_ = file->message_type(1);
  static const int root2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2, i_),
  };
  root2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      root2_descriptor_,
      root2::default_instance_,
      root2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(root2));
  root2_child_descriptor_ = root2_descriptor_->nested_type(0);
  static const int root2_child_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child, msg_),
  };
  root2_child_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      root2_child_descriptor_,
      root2_child::default_instance_,
      root2_child_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(root2_child));
  root2_child_subchild1_descriptor_ = root2_child_descriptor_->nested_type(0);
  static const int root2_child_subchild1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child_subchild1, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child_subchild1, msg_),
  };
  root2_child_subchild1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      root2_child_subchild1_descriptor_,
      root2_child_subchild1::default_instance_,
      root2_child_subchild1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child_subchild1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child_subchild1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(root2_child_subchild1));
  root2_child1_descriptor_ = root2_descriptor_->nested_type(1);
  static const int root2_child1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child1, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child1, msg_),
  };
  root2_child1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      root2_child1_descriptor_,
      root2_child1::default_instance_,
      root2_child1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(root2_child1));
  root2_child1_subchild2_descriptor_ = root2_child1_descriptor_->nested_type(0);
  static const int root2_child1_subchild2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child1_subchild2, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child1_subchild2, msg_),
  };
  root2_child1_subchild2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      root2_child1_subchild2_descriptor_,
      root2_child1_subchild2::default_instance_,
      root2_child1_subchild2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child1_subchild2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root2_child1_subchild2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(root2_child1_subchild2));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_teste_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    teste_descriptor_, &teste::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    root2_descriptor_, &root2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    root2_child_descriptor_, &root2_child::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    root2_child_subchild1_descriptor_, &root2_child_subchild1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    root2_child1_descriptor_, &root2_child1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    root2_child1_subchild2_descriptor_, &root2_child1_subchild2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_teste_2eproto() {
  delete teste::default_instance_;
  delete teste_reflection_;
  delete root2::default_instance_;
  delete root2_reflection_;
  delete root2_child::default_instance_;
  delete root2_child_reflection_;
  delete root2_child_subchild1::default_instance_;
  delete root2_child_subchild1_reflection_;
  delete root2_child1::default_instance_;
  delete root2_child1_reflection_;
  delete root2_child1_subchild2::default_instance_;
  delete root2_child1_subchild2_reflection_;
}

void protobuf_AddDesc_teste_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013teste.proto\"\022\n\005teste\022\t\n\001i\030\001 \002(\005\"\367\001\n\005ro"
    "ot2\022\t\n\001i\030\001 \002(\005\032p\n\005child\022\t\n\001e\030\001 \002(\005\022!\n\003ms"
    "g\030\002 \001(\t:\024esta eh uma mensagem\0329\n\tsubchil"
    "d1\022\t\n\001c\030\001 \002(\005\022!\n\003msg\030\002 \001(\t:\024esta eh uma "
    "mensagem\032q\n\006child1\022\t\n\001c\030\001 \002(\005\022!\n\003msg\030\002 \001"
    "(\t:\024esta eh uma mensagem\0329\n\tsubchild2\022\t\n"
    "\001c\030\001 \002(\005\022!\n\003msg\030\002 \001(\t:\024esta eh uma mensa"
    "gem", 283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "teste.proto", &protobuf_RegisterTypes);
  teste::default_instance_ = new teste();
  root2::default_instance_ = new root2();
  root2_child::default_instance_ = new root2_child();
  root2_child_subchild1::default_instance_ = new root2_child_subchild1();
  root2_child1::default_instance_ = new root2_child1();
  root2_child1_subchild2::default_instance_ = new root2_child1_subchild2();
  teste::default_instance_->InitAsDefaultInstance();
  root2::default_instance_->InitAsDefaultInstance();
  root2_child::default_instance_->InitAsDefaultInstance();
  root2_child_subchild1::default_instance_->InitAsDefaultInstance();
  root2_child1::default_instance_->InitAsDefaultInstance();
  root2_child1_subchild2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_teste_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_teste_2eproto {
  StaticDescriptorInitializer_teste_2eproto() {
    protobuf_AddDesc_teste_2eproto();
  }
} static_descriptor_initializer_teste_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int teste::kIFieldNumber;
#endif  // !_MSC_VER

teste::teste()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void teste::InitAsDefaultInstance() {
}

teste::teste(const teste& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void teste::SharedCtor() {
  _cached_size_ = 0;
  i_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

teste::~teste() {
  SharedDtor();
}

void teste::SharedDtor() {
  if (this != default_instance_) {
  }
}

void teste::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* teste::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return teste_descriptor_;
}

const teste& teste::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teste_2eproto();  return *default_instance_;
}

teste* teste::default_instance_ = NULL;

teste* teste::New() const {
  return new teste;
}

void teste::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    i_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool teste::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 i = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void teste::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 i = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->i(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* teste::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 i = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->i(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int teste::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 i = 1;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void teste::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const teste* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const teste*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void teste::MergeFrom(const teste& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_i(from.i());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void teste::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void teste::CopyFrom(const teste& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool teste::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void teste::Swap(teste* other) {
  if (other != this) {
    std::swap(i_, other->i_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata teste::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = teste_descriptor_;
  metadata.reflection = teste_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string root2_child_subchild1::_default_msg_("esta eh uma mensagem");
#ifndef _MSC_VER
const int root2_child_subchild1::kCFieldNumber;
const int root2_child_subchild1::kMsgFieldNumber;
#endif  // !_MSC_VER

root2_child_subchild1::root2_child_subchild1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void root2_child_subchild1::InitAsDefaultInstance() {
}

root2_child_subchild1::root2_child_subchild1(const root2_child_subchild1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void root2_child_subchild1::SharedCtor() {
  _cached_size_ = 0;
  c_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

root2_child_subchild1::~root2_child_subchild1() {
  SharedDtor();
}

void root2_child_subchild1::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void root2_child_subchild1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* root2_child_subchild1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return root2_child_subchild1_descriptor_;
}

const root2_child_subchild1& root2_child_subchild1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teste_2eproto();  return *default_instance_;
}

root2_child_subchild1* root2_child_subchild1::default_instance_ = NULL;

root2_child_subchild1* root2_child_subchild1::New() const {
  return new root2_child_subchild1;
}

void root2_child_subchild1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    c_ = 0;
    if (_has_bit(1)) {
      if (msg_ != &_default_msg_) {
        msg_->assign(_default_msg_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool root2_child_subchild1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 c = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2 [default = "esta eh uma mensagem"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void root2_child_subchild1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 c = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->c(), output);
  }
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* root2_child_subchild1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 c = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->c(), target);
  }
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int root2_child_subchild1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 c = 1;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c());
    }
    
    // optional string msg = 2 [default = "esta eh uma mensagem"];
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void root2_child_subchild1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const root2_child_subchild1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const root2_child_subchild1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void root2_child_subchild1::MergeFrom(const root2_child_subchild1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_c(from.c());
    }
    if (from._has_bit(1)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void root2_child_subchild1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void root2_child_subchild1::CopyFrom(const root2_child_subchild1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool root2_child_subchild1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void root2_child_subchild1::Swap(root2_child_subchild1* other) {
  if (other != this) {
    std::swap(c_, other->c_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata root2_child_subchild1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = root2_child_subchild1_descriptor_;
  metadata.reflection = root2_child_subchild1_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string root2_child::_default_msg_("esta eh uma mensagem");
#ifndef _MSC_VER
const int root2_child::kEFieldNumber;
const int root2_child::kMsgFieldNumber;
#endif  // !_MSC_VER

root2_child::root2_child()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void root2_child::InitAsDefaultInstance() {
}

root2_child::root2_child(const root2_child& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void root2_child::SharedCtor() {
  _cached_size_ = 0;
  e_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

root2_child::~root2_child() {
  SharedDtor();
}

void root2_child::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void root2_child::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* root2_child::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return root2_child_descriptor_;
}

const root2_child& root2_child::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teste_2eproto();  return *default_instance_;
}

root2_child* root2_child::default_instance_ = NULL;

root2_child* root2_child::New() const {
  return new root2_child;
}

void root2_child::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    e_ = 0;
    if (_has_bit(1)) {
      if (msg_ != &_default_msg_) {
        msg_->assign(_default_msg_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool root2_child::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 e = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &e_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2 [default = "esta eh uma mensagem"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void root2_child::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 e = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->e(), output);
  }
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* root2_child::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 e = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->e(), target);
  }
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int root2_child::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 e = 1;
    if (has_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->e());
    }
    
    // optional string msg = 2 [default = "esta eh uma mensagem"];
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void root2_child::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const root2_child* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const root2_child*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void root2_child::MergeFrom(const root2_child& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_e(from.e());
    }
    if (from._has_bit(1)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void root2_child::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void root2_child::CopyFrom(const root2_child& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool root2_child::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void root2_child::Swap(root2_child* other) {
  if (other != this) {
    std::swap(e_, other->e_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata root2_child::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = root2_child_descriptor_;
  metadata.reflection = root2_child_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string root2_child1_subchild2::_default_msg_("esta eh uma mensagem");
#ifndef _MSC_VER
const int root2_child1_subchild2::kCFieldNumber;
const int root2_child1_subchild2::kMsgFieldNumber;
#endif  // !_MSC_VER

root2_child1_subchild2::root2_child1_subchild2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void root2_child1_subchild2::InitAsDefaultInstance() {
}

root2_child1_subchild2::root2_child1_subchild2(const root2_child1_subchild2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void root2_child1_subchild2::SharedCtor() {
  _cached_size_ = 0;
  c_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

root2_child1_subchild2::~root2_child1_subchild2() {
  SharedDtor();
}

void root2_child1_subchild2::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void root2_child1_subchild2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* root2_child1_subchild2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return root2_child1_subchild2_descriptor_;
}

const root2_child1_subchild2& root2_child1_subchild2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teste_2eproto();  return *default_instance_;
}

root2_child1_subchild2* root2_child1_subchild2::default_instance_ = NULL;

root2_child1_subchild2* root2_child1_subchild2::New() const {
  return new root2_child1_subchild2;
}

void root2_child1_subchild2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    c_ = 0;
    if (_has_bit(1)) {
      if (msg_ != &_default_msg_) {
        msg_->assign(_default_msg_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool root2_child1_subchild2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 c = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2 [default = "esta eh uma mensagem"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void root2_child1_subchild2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 c = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->c(), output);
  }
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* root2_child1_subchild2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 c = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->c(), target);
  }
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int root2_child1_subchild2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 c = 1;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c());
    }
    
    // optional string msg = 2 [default = "esta eh uma mensagem"];
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void root2_child1_subchild2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const root2_child1_subchild2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const root2_child1_subchild2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void root2_child1_subchild2::MergeFrom(const root2_child1_subchild2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_c(from.c());
    }
    if (from._has_bit(1)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void root2_child1_subchild2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void root2_child1_subchild2::CopyFrom(const root2_child1_subchild2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool root2_child1_subchild2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void root2_child1_subchild2::Swap(root2_child1_subchild2* other) {
  if (other != this) {
    std::swap(c_, other->c_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata root2_child1_subchild2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = root2_child1_subchild2_descriptor_;
  metadata.reflection = root2_child1_subchild2_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string root2_child1::_default_msg_("esta eh uma mensagem");
#ifndef _MSC_VER
const int root2_child1::kCFieldNumber;
const int root2_child1::kMsgFieldNumber;
#endif  // !_MSC_VER

root2_child1::root2_child1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void root2_child1::InitAsDefaultInstance() {
}

root2_child1::root2_child1(const root2_child1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void root2_child1::SharedCtor() {
  _cached_size_ = 0;
  c_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

root2_child1::~root2_child1() {
  SharedDtor();
}

void root2_child1::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void root2_child1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* root2_child1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return root2_child1_descriptor_;
}

const root2_child1& root2_child1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teste_2eproto();  return *default_instance_;
}

root2_child1* root2_child1::default_instance_ = NULL;

root2_child1* root2_child1::New() const {
  return new root2_child1;
}

void root2_child1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    c_ = 0;
    if (_has_bit(1)) {
      if (msg_ != &_default_msg_) {
        msg_->assign(_default_msg_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool root2_child1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 c = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2 [default = "esta eh uma mensagem"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void root2_child1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 c = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->c(), output);
  }
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* root2_child1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 c = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->c(), target);
  }
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int root2_child1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 c = 1;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c());
    }
    
    // optional string msg = 2 [default = "esta eh uma mensagem"];
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void root2_child1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const root2_child1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const root2_child1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void root2_child1::MergeFrom(const root2_child1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_c(from.c());
    }
    if (from._has_bit(1)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void root2_child1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void root2_child1::CopyFrom(const root2_child1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool root2_child1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void root2_child1::Swap(root2_child1* other) {
  if (other != this) {
    std::swap(c_, other->c_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata root2_child1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = root2_child1_descriptor_;
  metadata.reflection = root2_child1_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int root2::kIFieldNumber;
#endif  // !_MSC_VER

root2::root2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void root2::InitAsDefaultInstance() {
}

root2::root2(const root2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void root2::SharedCtor() {
  _cached_size_ = 0;
  i_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

root2::~root2() {
  SharedDtor();
}

void root2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void root2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* root2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return root2_descriptor_;
}

const root2& root2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teste_2eproto();  return *default_instance_;
}

root2* root2::default_instance_ = NULL;

root2* root2::New() const {
  return new root2;
}

void root2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    i_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool root2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 i = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void root2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 i = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->i(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* root2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 i = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->i(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int root2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 i = 1;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void root2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const root2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const root2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void root2::MergeFrom(const root2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_i(from.i());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void root2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void root2::CopyFrom(const root2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool root2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void root2::Swap(root2* other) {
  if (other != this) {
    std::swap(i_, other->i_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata root2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = root2_descriptor_;
  metadata.reflection = root2_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
