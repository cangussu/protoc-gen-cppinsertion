// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teste.proto

#ifndef PROTOBUF_teste_2eproto__INCLUDED
#define PROTOBUF_teste_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "teste.pb.h_include.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_teste_2eproto();
void protobuf_AssignDesc_teste_2eproto();
void protobuf_ShutdownFile_teste_2eproto();

class teste;
class root2;
class root2_child;
class root2_child_subchild1;
class root2_child1;
class root2_child1_subchild2;

// ===================================================================

class teste : public ::google::protobuf::Message {
 public:
  teste();
  virtual ~teste();
  
  teste(const teste& from);
  
  inline teste& operator=(const teste& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const teste& default_instance();
  
  void Swap(teste* other);
  
  // implements Message ----------------------------------------------
  
  teste* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const teste& from);
  void MergeFrom(const teste& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 i = 1;
  inline bool has_i() const;
  inline void clear_i();
  static const int kIFieldNumber = 1;
  inline ::google::protobuf::int32 i() const;
  inline void set_i(::google::protobuf::int32 value);
  
  #include "teste.pb.h_class_teste.h"
  // @@protoc_insertion_point(class_scope:teste)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 i_;
  friend void  protobuf_AddDesc_teste_2eproto();
  friend void protobuf_AssignDesc_teste_2eproto();
  friend void protobuf_ShutdownFile_teste_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static teste* default_instance_;
};
// -------------------------------------------------------------------

class root2_child_subchild1 : public ::google::protobuf::Message {
 public:
  root2_child_subchild1();
  virtual ~root2_child_subchild1();
  
  root2_child_subchild1(const root2_child_subchild1& from);
  
  inline root2_child_subchild1& operator=(const root2_child_subchild1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const root2_child_subchild1& default_instance();
  
  void Swap(root2_child_subchild1* other);
  
  // implements Message ----------------------------------------------
  
  root2_child_subchild1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const root2_child_subchild1& from);
  void MergeFrom(const root2_child_subchild1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 c = 1;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 1;
  inline ::google::protobuf::int32 c() const;
  inline void set_c(::google::protobuf::int32 value);
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // @@protoc_insertion_point(class_scope:root2.child.subchild1)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 c_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  friend void  protobuf_AddDesc_teste_2eproto();
  friend void protobuf_AssignDesc_teste_2eproto();
  friend void protobuf_ShutdownFile_teste_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static root2_child_subchild1* default_instance_;
};
// -------------------------------------------------------------------

class root2_child : public ::google::protobuf::Message {
 public:
  root2_child();
  virtual ~root2_child();
  
  root2_child(const root2_child& from);
  
  inline root2_child& operator=(const root2_child& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const root2_child& default_instance();
  
  void Swap(root2_child* other);
  
  // implements Message ----------------------------------------------
  
  root2_child* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const root2_child& from);
  void MergeFrom(const root2_child& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef root2_child_subchild1 subchild1;
  
  // accessors -------------------------------------------------------
  
  // required int32 e = 1;
  inline bool has_e() const;
  inline void clear_e();
  static const int kEFieldNumber = 1;
  inline ::google::protobuf::int32 e() const;
  inline void set_e(::google::protobuf::int32 value);
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // @@protoc_insertion_point(class_scope:root2.child)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 e_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  friend void  protobuf_AddDesc_teste_2eproto();
  friend void protobuf_AssignDesc_teste_2eproto();
  friend void protobuf_ShutdownFile_teste_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static root2_child* default_instance_;
};
// -------------------------------------------------------------------

class root2_child1_subchild2 : public ::google::protobuf::Message {
 public:
  root2_child1_subchild2();
  virtual ~root2_child1_subchild2();
  
  root2_child1_subchild2(const root2_child1_subchild2& from);
  
  inline root2_child1_subchild2& operator=(const root2_child1_subchild2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const root2_child1_subchild2& default_instance();
  
  void Swap(root2_child1_subchild2* other);
  
  // implements Message ----------------------------------------------
  
  root2_child1_subchild2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const root2_child1_subchild2& from);
  void MergeFrom(const root2_child1_subchild2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 c = 1;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 1;
  inline ::google::protobuf::int32 c() const;
  inline void set_c(::google::protobuf::int32 value);
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // @@protoc_insertion_point(class_scope:root2.child1.subchild2)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 c_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  friend void  protobuf_AddDesc_teste_2eproto();
  friend void protobuf_AssignDesc_teste_2eproto();
  friend void protobuf_ShutdownFile_teste_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static root2_child1_subchild2* default_instance_;
};
// -------------------------------------------------------------------

class root2_child1 : public ::google::protobuf::Message {
 public:
  root2_child1();
  virtual ~root2_child1();
  
  root2_child1(const root2_child1& from);
  
  inline root2_child1& operator=(const root2_child1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const root2_child1& default_instance();
  
  void Swap(root2_child1* other);
  
  // implements Message ----------------------------------------------
  
  root2_child1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const root2_child1& from);
  void MergeFrom(const root2_child1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef root2_child1_subchild2 subchild2;
  
  // accessors -------------------------------------------------------
  
  // required int32 c = 1;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 1;
  inline ::google::protobuf::int32 c() const;
  inline void set_c(::google::protobuf::int32 value);
  
  // optional string msg = 2 [default = "esta eh uma mensagem"];
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // @@protoc_insertion_point(class_scope:root2.child1)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 c_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  friend void  protobuf_AddDesc_teste_2eproto();
  friend void protobuf_AssignDesc_teste_2eproto();
  friend void protobuf_ShutdownFile_teste_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static root2_child1* default_instance_;
};
// -------------------------------------------------------------------

class root2 : public ::google::protobuf::Message {
 public:
  root2();
  virtual ~root2();
  
  root2(const root2& from);
  
  inline root2& operator=(const root2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const root2& default_instance();
  
  void Swap(root2* other);
  
  // implements Message ----------------------------------------------
  
  root2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const root2& from);
  void MergeFrom(const root2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef root2_child child;
  typedef root2_child1 child1;
  
  // accessors -------------------------------------------------------
  
  // required int32 i = 1;
  inline bool has_i() const;
  inline void clear_i();
  static const int kIFieldNumber = 1;
  inline ::google::protobuf::int32 i() const;
  inline void set_i(::google::protobuf::int32 value);
  
  #include "teste.pb.h_class_root2.h"
  #include "teste.pb.h_class_root2_child.h"
  #include "teste.pb.h_class_root2_child_subchild1.h"
  #include "teste.pb.h_class_root2_child1.h"
  #include "teste.pb.h_class_root2_child1_subchild2.h"
  // @@protoc_insertion_point(class_scope:root2)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 i_;
  friend void  protobuf_AddDesc_teste_2eproto();
  friend void protobuf_AssignDesc_teste_2eproto();
  friend void protobuf_ShutdownFile_teste_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static root2* default_instance_;
};
// ===================================================================


// ===================================================================

// teste

// required int32 i = 1;
inline bool teste::has_i() const {
  return _has_bit(0);
}
inline void teste::clear_i() {
  i_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 teste::i() const {
  return i_;
}
inline void teste::set_i(::google::protobuf::int32 value) {
  _set_bit(0);
  i_ = value;
}

// -------------------------------------------------------------------

// root2_child_subchild1

// required int32 c = 1;
inline bool root2_child_subchild1::has_c() const {
  return _has_bit(0);
}
inline void root2_child_subchild1::clear_c() {
  c_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 root2_child_subchild1::c() const {
  return c_;
}
inline void root2_child_subchild1::set_c(::google::protobuf::int32 value) {
  _set_bit(0);
  c_ = value;
}

// optional string msg = 2 [default = "esta eh uma mensagem"];
inline bool root2_child_subchild1::has_msg() const {
  return _has_bit(1);
}
inline void root2_child_subchild1::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->assign(_default_msg_);
  }
  _clear_bit(1);
}
inline const ::std::string& root2_child_subchild1::msg() const {
  return *msg_;
}
inline void root2_child_subchild1::set_msg(const ::std::string& value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void root2_child_subchild1::set_msg(const char* value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void root2_child_subchild1::set_msg(const char* value, size_t size) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* root2_child_subchild1::mutable_msg() {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string(_default_msg_);
  }
  return msg_;
}

// -------------------------------------------------------------------

// root2_child

// required int32 e = 1;
inline bool root2_child::has_e() const {
  return _has_bit(0);
}
inline void root2_child::clear_e() {
  e_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 root2_child::e() const {
  return e_;
}
inline void root2_child::set_e(::google::protobuf::int32 value) {
  _set_bit(0);
  e_ = value;
}

// optional string msg = 2 [default = "esta eh uma mensagem"];
inline bool root2_child::has_msg() const {
  return _has_bit(1);
}
inline void root2_child::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->assign(_default_msg_);
  }
  _clear_bit(1);
}
inline const ::std::string& root2_child::msg() const {
  return *msg_;
}
inline void root2_child::set_msg(const ::std::string& value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void root2_child::set_msg(const char* value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void root2_child::set_msg(const char* value, size_t size) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* root2_child::mutable_msg() {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string(_default_msg_);
  }
  return msg_;
}

// -------------------------------------------------------------------

// root2_child1_subchild2

// required int32 c = 1;
inline bool root2_child1_subchild2::has_c() const {
  return _has_bit(0);
}
inline void root2_child1_subchild2::clear_c() {
  c_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 root2_child1_subchild2::c() const {
  return c_;
}
inline void root2_child1_subchild2::set_c(::google::protobuf::int32 value) {
  _set_bit(0);
  c_ = value;
}

// optional string msg = 2 [default = "esta eh uma mensagem"];
inline bool root2_child1_subchild2::has_msg() const {
  return _has_bit(1);
}
inline void root2_child1_subchild2::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->assign(_default_msg_);
  }
  _clear_bit(1);
}
inline const ::std::string& root2_child1_subchild2::msg() const {
  return *msg_;
}
inline void root2_child1_subchild2::set_msg(const ::std::string& value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void root2_child1_subchild2::set_msg(const char* value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void root2_child1_subchild2::set_msg(const char* value, size_t size) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* root2_child1_subchild2::mutable_msg() {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string(_default_msg_);
  }
  return msg_;
}

// -------------------------------------------------------------------

// root2_child1

// required int32 c = 1;
inline bool root2_child1::has_c() const {
  return _has_bit(0);
}
inline void root2_child1::clear_c() {
  c_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 root2_child1::c() const {
  return c_;
}
inline void root2_child1::set_c(::google::protobuf::int32 value) {
  _set_bit(0);
  c_ = value;
}

// optional string msg = 2 [default = "esta eh uma mensagem"];
inline bool root2_child1::has_msg() const {
  return _has_bit(1);
}
inline void root2_child1::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->assign(_default_msg_);
  }
  _clear_bit(1);
}
inline const ::std::string& root2_child1::msg() const {
  return *msg_;
}
inline void root2_child1::set_msg(const ::std::string& value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void root2_child1::set_msg(const char* value) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void root2_child1::set_msg(const char* value, size_t size) {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* root2_child1::mutable_msg() {
  _set_bit(1);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string(_default_msg_);
  }
  return msg_;
}

// -------------------------------------------------------------------

// root2

// required int32 i = 1;
inline bool root2::has_i() const {
  return _has_bit(0);
}
inline void root2::clear_i() {
  i_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 root2::i() const {
  return i_;
}
inline void root2::set_i(::google::protobuf::int32 value) {
  _set_bit(0);
  i_ = value;
}


#include "teste.pb.h_namespace.h"
// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#include "teste.pb.h_global.h"
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_teste_2eproto__INCLUDED
